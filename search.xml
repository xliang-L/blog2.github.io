<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>云南旅游</title>
      <link href="/2023/07/09/%E4%BA%91%E5%8D%97%E6%97%85%E6%B8%B8/"/>
      <url>/2023/07/09/%E4%BA%91%E5%8D%97%E6%97%85%E6%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="云南之行-·-昆明"><a href="#云南之行-·-昆明" class="headerlink" title="云南之行 · 昆明"></a>云南之行 · 昆明</h1><h2 id="出发！"><a href="#出发！" class="headerlink" title="出发！"></a>出发！</h2><p>我们选择的是晚上的航班，晚上的路上下起了淅淅沥沥的小雨。</p><p><img src="https://raw.githubusercontent.com/xliang-L/picbed/master/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230709171522.jpg" alt="西安，你别哭了，我又不是不回来了。" title="西安，你别哭了，我又不是不回来了。"></p><p>果不其然，飞机延误了。。。。。。</p><p>算了，第一次坐飞机总要发生点意外吧。（后来的第二次和第三次也都延误了，延误率属实是真尼玛高。）</p><p>在候机室和新包谈天说地，聊到了各自的爱好，我其实很好奇，为什么他能这么多爱好，还都能自得其乐。聊了很多，印象比较深的一句话就是，‘’只是爱好，并不坚持‘’。有点醍醐灌顶的感觉。</p><p><img src="https://raw.githubusercontent.com/xliang-L/picbed/master/IMG_0295.JPEG" alt="s.png" title="登上了飞机"></p>]]></content>
      
      
      <categories>
          
          <category> 毕业旅游 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云南 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>page</title>
      <link href="/2023/07/09/page/"/>
      <url>/2023/07/09/page/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vgg模型剪枝实例</title>
      <link href="/2022/12/05/modelslim/"/>
      <url>/2022/12/05/modelslim/</url>
      
        <content type="html"><![CDATA[<h1 id="vgg-模型构建"><a href="#vgg-模型构建" class="headerlink" title="vgg 模型构建"></a>vgg 模型构建</h1><p>vgg模型是较为经典的图像分类算法模型。</p><p>新建vgg.py 文件，将一下代码复制到里面。用作生成vgg 模型。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># official pretrain weights</span></span><br><span class="line">model_urls = &#123;</span><br><span class="line">    <span class="string">&#x27;vgg11&#x27;</span>: <span class="string">&#x27;https://download.pytorch.org/models/vgg11-bbd30ac9.pth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vgg13&#x27;</span>: <span class="string">&#x27;https://download.pytorch.org/models/vgg13-c768596a.pth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vgg16&#x27;</span>: <span class="string">&#x27;https://download.pytorch.org/models/vgg16-397923af.pth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vgg19&#x27;</span>: <span class="string">&#x27;https://download.pytorch.org/models/vgg19-dcbb9e9d.pth&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VGG</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, dataset = <span class="string">&#x27;cifar10&#x27;</span>, num_classes=<span class="number">10</span>, init_weights=<span class="literal">True</span>,cfg = <span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(VGG, self).__init__()</span><br><span class="line">        <span class="keyword">if</span> cfg <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cfg = [<span class="number">64</span>, <span class="number">64</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>]</span><br><span class="line">        <span class="built_in">print</span>(cfg)</span><br><span class="line">        self.feature = self.make_layers(cfg,<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> (dataset == <span class="string">&#x27;cifar100&#x27;</span>):</span><br><span class="line">            num_classes = <span class="number">100</span></span><br><span class="line">        <span class="keyword">elif</span> dataset == <span class="string">&#x27;cifar10&#x27;</span>:</span><br><span class="line">            num_classes = <span class="number">10</span></span><br><span class="line">        self.classifier = nn.Linear(cfg[-<span class="number">1</span>],num_classes)</span><br><span class="line">        <span class="keyword">if</span> init_weights:  <span class="comment"># 是否进行权重初始化</span></span><br><span class="line">            self._initialize_weights()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_layers</span>(<span class="params">self,cfg,batch_norm = <span class="literal">False</span></span>):</span><br><span class="line">        layers = []</span><br><span class="line">        in_channels = <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span>  cfg:</span><br><span class="line">            <span class="keyword">if</span> v == <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">                layers += [nn.MaxPool2d(kernel_size=<span class="number">2</span>,stride=<span class="number">2</span>)]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                conv2d = nn.Conv2d(in_channels,v,kernel_size=<span class="number">3</span>,padding=<span class="number">1</span>,bias= <span class="literal">False</span>)</span><br><span class="line">                <span class="keyword">if</span> batch_norm:</span><br><span class="line">                    layers += [conv2d,nn.BatchNorm2d(v),nn.ReLU(inplace= <span class="literal">True</span>)]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    layers+= [conv2d,nn.ReLU(inplace= <span class="literal">True</span>)]</span><br><span class="line">                in_channels = v</span><br><span class="line">        <span class="keyword">return</span> nn.Sequential(*layers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 正向传播过程</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># N x 3 x 224 x 224</span></span><br><span class="line">        x = self.feature(x)  <span class="comment"># 输入到特征提取网络</span></span><br><span class="line"></span><br><span class="line">        x = nn.AvgPool2d(<span class="number">2</span>)(x)</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>),-<span class="number">1</span>)</span><br><span class="line">        x = self.classifier(x)  <span class="comment"># 输入到分类网络中，得到输出</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_initialize_weights</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self.modules():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">                <span class="comment"># nn.init.kaiming_normal_(m.weight, mode=&#x27;fan_out&#x27;, nonlinearity=&#x27;relu&#x27;)</span></span><br><span class="line">                nn.init.xavier_uniform_(m.weight)</span><br><span class="line">                <span class="keyword">if</span> m.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">                nn.init.xavier_uniform_(m.weight)</span><br><span class="line">                <span class="comment"># nn.init.normal_(m.weight, 0, 0.01)</span></span><br><span class="line">                nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cfgs = &#123;</span><br><span class="line">    <span class="string">&#x27;vgg11&#x27;</span>: [<span class="number">64</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">128</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">&#x27;M&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;vgg13&#x27;</span>: [<span class="number">64</span>, <span class="number">64</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">&#x27;M&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;vgg16&#x27;</span>: [<span class="number">64</span>, <span class="number">64</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">&#x27;M&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;vgg19&#x27;</span>: [<span class="number">64</span>, <span class="number">64</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="number">256</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="number">512</span>, <span class="string">&#x27;M&#x27;</span>,<span class="number">10</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化配置模型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vgg</span>(<span class="params">model_name=<span class="string">&quot;vgg19&quot;</span>,cfg = <span class="string">&#x27;&#x27;</span> ,**kwargs</span>):</span><br><span class="line">    <span class="keyword">assert</span> model_name <span class="keyword">in</span> cfgs, <span class="string">&quot;Warning: model number &#123;&#125; not in cfgs dict!&quot;</span>.<span class="built_in">format</span>(model_name)</span><br><span class="line">    <span class="keyword">if</span> cfg == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        cfg = <span class="literal">None</span></span><br><span class="line">    <span class="built_in">print</span>(cfg)</span><br><span class="line">    model = VGG(cfg = cfg)  <span class="comment"># 可以传递任意数量的实参，以字典的形式导入</span></span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><h1 id="vgg-模型训练"><a href="#vgg-模型训练" class="headerlink" title="vgg 模型训练"></a>vgg 模型训练</h1><p>新建main.py 文件，将一下代码复制到里面。运行，即可自动下载数据集cifar 10 ，并且训练得到vgg 19 的模型权重文件。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets,transforms</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> vgg <span class="keyword">import</span> vgg</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 训练，加入l1 正则化， sr --s 0.0001</span></span><br><span class="line"><span class="comment"># 2 执行剪枝操作 -- model model_best.pth.tar --save pruned.pth.tar --percent 0.7</span></span><br><span class="line"><span class="comment"># 3 再次进行微调操作 -refine pruned.pth.tar --epochs 40</span></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;pytorch slimming CIFAR training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--dataset&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">str</span>,default=<span class="string">&#x27;cifar10&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;training dataset&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--sparsity-regulariztion&#x27;</span>,<span class="string">&#x27;-sr&#x27;</span>,dest = <span class="string">&#x27;sr&#x27;</span>,action=<span class="string">&#x27;store_true&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--s&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">float</span>,default=<span class="number">0.0001</span>,<span class="built_in">help</span>=<span class="string">&#x27;training dataset&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--refine&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">str</span>,default=<span class="string">&#x27;&#x27;</span>,metavar=<span class="string">&#x27;PATH&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--batch_size&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">int</span>,default=<span class="number">100</span>,metavar=<span class="string">&#x27;N&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--test_batch_size&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">int</span>,default=<span class="number">100</span>,metavar=<span class="string">&#x27;N&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--epochs&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">int</span>,default=<span class="number">5</span>,metavar=<span class="string">&#x27;N&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--start_epoch&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">int</span>,default=<span class="number">0</span>,metavar=<span class="string">&#x27;N&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--lr&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">float</span>,default=<span class="number">0.1</span>,metavar=<span class="string">&#x27;LR&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--momentum&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">float</span>,default=<span class="number">0.9</span>,metavar=<span class="string">&#x27;M&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--weight_decay&#x27;</span>,<span class="string">&#x27;--wd&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">float</span>,default=<span class="number">1e-4</span>,metavar=<span class="string">&#x27;W&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--resume&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">str</span>,default=<span class="string">&#x27;&#x27;</span>,metavar=<span class="string">&#x27;PATH&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--no-cuda&#x27;</span>,action=<span class="string">&#x27;store_true&#x27;</span>,default=<span class="literal">False</span>,<span class="built_in">help</span>=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--seed&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">int</span> ,default=<span class="number">1</span>,metavar=<span class="string">&#x27;S&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--log-interval&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">int</span> ,default=<span class="number">100</span>,metavar=<span class="string">&#x27;N&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line">args.cuda = <span class="keyword">not</span> args.no_cuda <span class="keyword">and</span> torch.cuda.is_available()</span><br><span class="line">torch.manual_seed(args.seed)</span><br><span class="line"><span class="keyword">if</span> args.cuda:</span><br><span class="line">    torch.cuda.manual_seed(args.seed)</span><br><span class="line"></span><br><span class="line">kwargs = &#123;<span class="string">&#x27;num_workers&#x27;</span>: <span class="number">0</span> ,<span class="string">&#x27;pin_memory&#x27;</span>: <span class="literal">True</span>&#125; <span class="keyword">if</span> args.cuda <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">train_loader = torch.utils.data.DataLoader(</span><br><span class="line">    datasets.CIFAR10(<span class="string">&#x27;./data&#x27;</span>,train= <span class="literal">True</span>,download= <span class="literal">True</span>,transform= transforms.Compose([</span><br><span class="line">        transforms.Pad(<span class="number">4</span>),</span><br><span class="line">        transforms.RandomCrop(<span class="number">32</span>),</span><br><span class="line">        transforms.RandomHorizontalFlip(),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize((<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>),(<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>))</span><br><span class="line">    ])),</span><br><span class="line">    batch_size = args.batch_size,shuffle = <span class="literal">True</span>,**kwargs</span><br><span class="line">)</span><br><span class="line">test_loader = torch.utils.data.DataLoader(</span><br><span class="line">    datasets.CIFAR10(<span class="string">&#x27;./data&#x27;</span>,train= <span class="literal">False</span>,download= <span class="literal">True</span>,transform= transforms.Compose([</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize((<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>),(<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>))</span><br><span class="line">    ])),</span><br><span class="line">    batch_size = args.test_batch_size,shuffle = <span class="literal">True</span>,**kwargs</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.refine:</span><br><span class="line">    checkpoint = torch.load(args.refine)</span><br><span class="line">    model = vgg(cfg = checkpoint[<span class="string">&#x27;cfg&#x27;</span>])</span><br><span class="line">    <span class="comment"># model = vgg()</span></span><br><span class="line">    model.cuda()</span><br><span class="line">    model.load_state_dict(checkpoint[<span class="string">&#x27;state_dict&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    model = vgg()</span><br><span class="line"><span class="keyword">if</span> args.cuda:</span><br><span class="line">    model.cuda()</span><br><span class="line"></span><br><span class="line">optimizer = optim.SGD(model.parameters(),lr = args.lr,momentum= args.momentum ,weight_decay= args.weight_decay)</span><br><span class="line"><span class="keyword">if</span> args.resume:</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(args.resume):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;loading check point &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.resume))</span><br><span class="line">        checkpoint = torch.load(args.resume)</span><br><span class="line">        args.start_epoch = checkpoint[<span class="string">&#x27;epoch&#x27;</span>]</span><br><span class="line">        best_prec1 = checkpoint[<span class="string">&#x27;best_prec1&#x27;</span>]</span><br><span class="line">        model.load_state_dict(checkpoint[<span class="string">&#x27;state_dict&#x27;</span>])</span><br><span class="line">        optimizer.load_state_dict(checkpoint[<span class="string">&#x27;optimizer&#x27;</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;loading check point &#x27;&#123;&#125;&#x27; (epoch &#123;&#125;)prec1:&#123;:f&#125;&quot;</span>.<span class="built_in">format</span>(args.resume,checkpoint[<span class="string">&#x27;epoch&#x27;</span>],best_prec1))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;no checkpoingt fount at &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.resume))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">updateBN</span>():</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> model.modules():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(m,nn.BatchNorm2d):</span><br><span class="line">            m.weight.grad.data.add_(args.s*torch.sigh(m.weight.data))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">epoch</span>):</span><br><span class="line">    model.train()</span><br><span class="line">    <span class="keyword">for</span> batch_idx,(data,target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        <span class="keyword">if</span> args.cuda:</span><br><span class="line">            data,target = data.cuda(),target.cuda()</span><br><span class="line">        data,target = Variable(data),Variable(target)</span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        <span class="comment"># print(data)</span></span><br><span class="line">        output  = model(data)</span><br><span class="line">        loss = F.cross_entropy(output,target)</span><br><span class="line">        loss.backward()</span><br><span class="line">        <span class="keyword">if</span> args.sr:</span><br><span class="line">            updateBN()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        <span class="keyword">if</span> batch_idx % args.log_interval == <span class="number">0</span> :</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;train epoch :&#123;&#125;[&#123;&#125;/&#123;&#125; (&#123;:.1f&#125;%)]\t loss:&#123;:.6f&#125;&#x27;</span>.<span class="built_in">format</span>(epoch,batch_idx * <span class="built_in">len</span>(data)</span><br><span class="line">            ,<span class="built_in">len</span>(train_loader.dataset),<span class="number">100.</span> * batch_idx / <span class="built_in">len</span>(train_loader),loss.item()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    test_loss = <span class="number">0</span></span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> data,target <span class="keyword">in</span> test_loader:</span><br><span class="line">        <span class="keyword">if</span> args.cuda:</span><br><span class="line">            data ,target = data.cuda(),target.cuda()</span><br><span class="line">        data,target = Variable(data),Variable(target)</span><br><span class="line">        output = model(data)</span><br><span class="line">        test_loss += F.cross_entropy(output,target,size_average=<span class="literal">False</span>).item()</span><br><span class="line">        pred = output.data.<span class="built_in">max</span>(<span class="number">1</span>,keepdim = <span class="literal">True</span>)[<span class="number">1</span>]</span><br><span class="line">        correct += pred.eq(target.data.view_as(pred)).cpu().<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">    test_loss /= <span class="built_in">len</span>(test_loader.dataset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n Test set : average loss : &#123;:.4f&#125;,Accuracy : &#123;&#125;/&#123;&#125; (&#123;:.1f&#125;%)\n&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        test_loss,correct,<span class="built_in">len</span>(test_loader.dataset),<span class="number">100.</span> * correct / <span class="built_in">len</span>(test_loader.dataset)</span><br><span class="line">    ))</span><br><span class="line">    <span class="keyword">return</span> correct / <span class="built_in">float</span>(<span class="built_in">len</span>(test_loader.dataset))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_checkpoint</span> (state,is_best,filename = <span class="string">&#x27;checkpoint.pth.tar&#x27;</span>):</span><br><span class="line">    torch.save(state,filename)</span><br><span class="line">    <span class="keyword">if</span> is_best:</span><br><span class="line">        shutil.copyfile(filename,<span class="string">&#x27;model_best.pth.tar&#x27;</span>)</span><br><span class="line"></span><br><span class="line">best_prec1 = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(args.start_epoch,args.epochs):</span><br><span class="line">    <span class="keyword">if</span> epoch <span class="keyword">in</span> [args.epochs*<span class="number">0.5</span> ,args.epochs*<span class="number">0.75</span>]:</span><br><span class="line">        <span class="keyword">for</span> param_group <span class="keyword">in</span> optimizer.param_groups:</span><br><span class="line">            param_group[<span class="string">&#x27;lr&#x27;</span>] *= <span class="number">0.1</span></span><br><span class="line">    train(epoch)</span><br><span class="line">    prec1 = test()</span><br><span class="line">    is_best = prec1 &gt; best_prec1</span><br><span class="line">    best_prec1 = <span class="built_in">max</span>(prec1,best_prec1)</span><br><span class="line">    save_checkpoint(&#123;</span><br><span class="line">        <span class="string">&#x27;epoch&#x27;</span>:epoch + <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;state_dict&#x27;</span>: model.state_dict(),</span><br><span class="line">        <span class="string">&#x27;best_prec1&#x27;</span> : best_prec1,</span><br><span class="line">        <span class="string">&#x27;optimizer&#x27;</span> : optimizer.state_dict(),</span><br><span class="line">    &#125;,is_best)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;done&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="vgg-模型剪枝"><a href="#vgg-模型剪枝" class="headerlink" title="vgg 模型剪枝"></a>vgg 模型剪枝</h1><p>新建 prune.py  将一下代码复制到里面。</p><p>调整 percent 参数 来 调整参数剪枝比例。</p><p>运行文件，可生成剪枝后的模型config 以及模型权重文件。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets,transforms</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> vgg <span class="keyword">import</span> vgg</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;pytorch slimming CIFAR training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--dataset&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">str</span>,default=<span class="string">&#x27;cifar10&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;training dataset&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--test_batch_size&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">int</span>,default=<span class="number">100</span>,metavar=<span class="string">&#x27;N&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--no-cuda&#x27;</span>,action=<span class="string">&#x27;store_true&#x27;</span>,default=<span class="literal">False</span>,<span class="built_in">help</span>=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--model&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">str</span>,default=<span class="string">&#x27;model_best.pth.tar&#x27;</span>,metavar=<span class="string">&#x27;PATH&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--save&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">str</span>,default=<span class="string">&#x27;pruned.pth.tar&#x27;</span>,metavar=<span class="string">&#x27;PATH&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--percent&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">float</span>,default=<span class="number">0.7</span>,<span class="built_in">help</span>=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line">args.cuda = <span class="keyword">not</span> args.no_cuda <span class="keyword">and</span> torch.cuda.is_available()</span><br><span class="line"></span><br><span class="line">model = vgg()</span><br><span class="line"><span class="keyword">if</span> args.cuda:</span><br><span class="line">    model.cuda()</span><br><span class="line"><span class="keyword">if</span> args.model:</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile((args.model)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;loading check point &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.model))</span><br><span class="line">        checkpoint = torch.load(args.model)</span><br><span class="line">        args.start_epoch = checkpoint[<span class="string">&#x27;epoch&#x27;</span>]</span><br><span class="line">        best_prec1 = checkpoint[<span class="string">&#x27;best_prec1&#x27;</span>]</span><br><span class="line">        model.load_state_dict(checkpoint[<span class="string">&#x27;state_dict&#x27;</span>])</span><br><span class="line">        <span class="comment"># optimizer.load_state_dict(checkpoint[&#x27;optimizer&#x27;])</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;loading check point &#x27;&#123;&#125;&#x27; (epoch &#123;&#125;)prec1:&#123;:f&#125;&quot;</span>.<span class="built_in">format</span>(args.model,checkpoint[<span class="string">&#x27;epoch&#x27;</span>],best_prec1))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;no checkpoingt fount at &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.resume))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(model)</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> model.modules():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m,nn.BatchNorm2d):</span><br><span class="line">        total += m.weight.data.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">bn = torch.zeros(total)</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> model.modules():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m,nn.BatchNorm2d):</span><br><span class="line">        size = m.weight.data.shape[<span class="number">0</span>]</span><br><span class="line">        bn[index:(index+size)] = m.weight.data.<span class="built_in">abs</span>().clone()</span><br><span class="line">        index += size</span><br><span class="line"></span><br><span class="line">y,i = torch.sort(bn)</span><br><span class="line">thre_index = <span class="built_in">int</span> (total * args.percent)</span><br><span class="line">thre = y[thre_index]</span><br><span class="line"></span><br><span class="line">pruned = <span class="number">0</span></span><br><span class="line">cfg =[]</span><br><span class="line">cfg_mask = []</span><br><span class="line"><span class="keyword">for</span> k,m <span class="keyword">in</span> <span class="built_in">enumerate</span>(model.modules()):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m,nn.BatchNorm2d):</span><br><span class="line">        weight_copy = m.weight.data.clone()</span><br><span class="line">        mask = weight_copy.<span class="built_in">abs</span>().gt(thre).<span class="built_in">float</span>().cuda()</span><br><span class="line">        pruned = pruned + mask.shape[<span class="number">0</span>] - torch.<span class="built_in">sum</span>(mask)</span><br><span class="line">        m.weight.data.mul_(mask)</span><br><span class="line">        m.bias.data.mul_(mask)</span><br><span class="line">        cfg.append(<span class="built_in">int</span>(torch.<span class="built_in">sum</span>(mask)))</span><br><span class="line">        cfg_mask.append(mask.clone())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;layer index :&#123;:d&#125; \t total channel :&#123;:d&#125; \t remaining channel :&#123;:d&#125;&quot;</span></span><br><span class="line">              .<span class="built_in">format</span>(k,mask.shape[<span class="number">0</span>],<span class="built_in">int</span>(torch.<span class="built_in">sum</span>(mask))))</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m,nn.MaxPool2d):</span><br><span class="line">        cfg.append(<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pruned_radio = pruned / total</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;pre processing successful!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    kwargs = &#123;<span class="string">&#x27;num_workers&#x27;</span> : <span class="number">0</span>,<span class="string">&#x27;pin_memory&#x27;</span> :<span class="literal">True</span>&#125; <span class="keyword">if</span> args.cuda <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">    test_loader = torch.utils.data.DataLoader(</span><br><span class="line">        datasets.CIFAR10(<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>, transform=transforms.Compose([</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))</span><br><span class="line">        ])),</span><br><span class="line">        batch_size=args.test_batch_size, shuffle=<span class="literal">True</span>, **kwargs</span><br><span class="line">    )</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> data,target <span class="keyword">in</span> test_loader:</span><br><span class="line">        <span class="keyword">if</span> args.cuda:</span><br><span class="line">            data,target = data.cuda(),target.cuda()</span><br><span class="line">        data, target = Variable(data,volatile = <span class="literal">True</span>), Variable(target)</span><br><span class="line">        output = model(data)</span><br><span class="line">        pred = output.data.<span class="built_in">max</span>(<span class="number">1</span>,keepdim = <span class="literal">True</span>)[<span class="number">1</span>]</span><br><span class="line">        correct += pred.eq(target.data.view_as(pred)).cpu().<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n Test set : accuracy : &#123;&#125;/&#123;&#125; (&#123;:.1f&#125;%)\n&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        correct,<span class="built_in">len</span>(test_loader.dataset),<span class="number">100.</span>*correct /<span class="built_in">len</span>(test_loader.dataset)))</span><br><span class="line">    <span class="keyword">return</span> correct / <span class="built_in">float</span>(<span class="built_in">len</span>(test_loader.dataset))</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cfg)</span><br><span class="line">newmodel = vgg(cfg = cfg)</span><br><span class="line">newmodel.cuda()</span><br><span class="line"><span class="built_in">print</span>(newmodel)</span><br><span class="line">layer_id_in_cfg = <span class="number">0</span></span><br><span class="line">start_musk = torch.ones(<span class="number">3</span>)</span><br><span class="line">end_mask = cfg_mask[layer_id_in_cfg]</span><br><span class="line"><span class="keyword">for</span> [m0,m1] <span class="keyword">in</span> <span class="built_in">zip</span>(model.modules(),newmodel.modules()):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m0,nn.BatchNorm2d):</span><br><span class="line">        idx1 = np.squeeze(np.argwhere(np.asarray(end_mask.cpu().numpy())))</span><br><span class="line">        m1.weight.data = m0.weight.data[idx1].clone()</span><br><span class="line">        m1.bias.data = m0.bias.data[idx1].clone()</span><br><span class="line">        m1.running_mean = m0.running_mean[idx1].clone()</span><br><span class="line">        m1.running_var = m0.running_var[idx1].clone()</span><br><span class="line">        layer_id_in_cfg += <span class="number">1</span></span><br><span class="line">        start_musk = end_mask.clone()</span><br><span class="line">        <span class="keyword">if</span> layer_id_in_cfg &lt;<span class="built_in">len</span>(cfg_mask):</span><br><span class="line">            end_mask = cfg_mask[layer_id_in_cfg]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m0,nn.Conv2d):</span><br><span class="line">        idx0 = np.squeeze(np.argwhere(np.asarray(start_musk.cpu().numpy())))</span><br><span class="line">        idx1 = np.squeeze(np.argwhere(np.asarray(end_mask.cpu().numpy())))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;In shape : &#123;:d&#125; out shape : &#123;:d&#125;&#x27;</span>.<span class="built_in">format</span>(idx0.shape[<span class="number">0</span>],idx1.shape[<span class="number">0</span>]))</span><br><span class="line">        w = m0.weight.data[:,idx0,:,:].clone()</span><br><span class="line">        w = w [idx1,:,:,:].clone()</span><br><span class="line">        m1.weight.data = w.clone()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m0,nn.Linear):</span><br><span class="line">        idx0 = np.squeeze(np.argwhere(np.asarray(start_musk.cpu().numpy())))</span><br><span class="line">        m1.weight.data = m0.weight.data[:,idx0].clone()</span><br><span class="line"></span><br><span class="line">torch.save(&#123;<span class="string">&#x27;cfg&#x27;</span>: cfg, <span class="string">&#x27;state_dict&#x27;</span>: newmodel.state_dict()&#125;, args.save)</span><br><span class="line"><span class="built_in">print</span>(newmodel)</span><br><span class="line">model = newmodel</span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="模型微调"><a href="#模型微调" class="headerlink" title="模型微调"></a>模型微调</h1><p>返回main.py 文件。将refine 参数设置为剪枝后的模型权重文件路径。再次进行微调。即可得到剪枝后的vgg 模型。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vgg </tag>
            
            <tag> 模型剪枝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cuda学习笔记(1)</title>
      <link href="/2022/12/04/cuda/"/>
      <url>/2022/12/04/cuda/</url>
      
        <content type="html"><![CDATA[<h1 id="GPU体系架构"><a href="#GPU体系架构" class="headerlink" title="GPU体系架构"></a>GPU体系架构</h1><h2 id="为什么需要GPU"><a href="#为什么需要GPU" class="headerlink" title="为什么需要GPU"></a>为什么需要GPU</h2><p><strong>概念</strong></p><blockquote><p>FLOPS ： 每秒钟可以进行的浮点数的运算</p><p>GFLOPS：每秒钟可以进行十亿FLOPS</p><p>TFLOPS： 1000 GFLOPS</p></blockquote><ul><li><p>应用的需求越来越高</p></li><li><p>计算机技术由应用驱动</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cuda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode 刷题 思维</title>
      <link href="/2022/11/30/leetcode%E5%88%B7%E9%A2%98%E6%A3%80%E6%9F%A5%E6%B8%85%E5%8D%95/"/>
      <url>/2022/11/30/leetcode%E5%88%B7%E9%A2%98%E6%A3%80%E6%9F%A5%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode刷题检查清单"><a href="#leetcode刷题检查清单" class="headerlink" title="leetcode刷题检查清单"></a>leetcode刷题检查清单</h1><ol><li><p>测试案例的边界条件</p></li><li><p>思考是否可以用常用的数据结构解决</p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习模型部署实例</title>
      <link href="/2022/11/30/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E5%92%8C%E5%89%AA%E6%9E%9D%E4%BC%98%E5%8C%96%E5%AE%9E%E4%BE%8B/"/>
      <url>/2022/11/30/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E5%92%8C%E5%89%AA%E6%9E%9D%E4%BC%98%E5%8C%96%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="利用flask部署模型"><a href="#利用flask部署模型" class="headerlink" title="利用flask部署模型"></a>利用flask部署模型</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#服务端</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span>  nn</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms <span class="keyword">as</span> T</span><br><span class="line"><span class="keyword">from</span> torchvision.models <span class="keyword">import</span> resnet50</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化flask</span></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line">model = <span class="literal">None</span></span><br><span class="line">use_gpu = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">idx2label = &#123;&#125;</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;imagenet_class.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    a = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">id</span>,line <span class="keyword">in</span> <span class="built_in">enumerate</span>(a) :</span><br><span class="line">        idx2label[<span class="built_in">id</span>] = line</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_model</span>():</span><br><span class="line">    <span class="keyword">global</span> model</span><br><span class="line">    model = resnet50(pretrained = <span class="literal">True</span>)</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    <span class="keyword">if</span> use_gpu:</span><br><span class="line">        model.cuda()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prepare_image</span>(<span class="params">image,target_size</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> image.mode != <span class="string">&#x27;RGB&#x27;</span> :</span><br><span class="line">        image = image.covert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">    <span class="comment"># image = T.Resize</span></span><br><span class="line">    image = T.Resize(target_size)(image)</span><br><span class="line">    image = T.ToTensor()(image)</span><br><span class="line">    image = T.Normalize([<span class="number">0.485</span>,<span class="number">0.456</span>,<span class="number">0.406</span>],[<span class="number">0.229</span>,<span class="number">0.224</span>,<span class="number">0.225</span>])(image)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># add batch_size axis.</span></span><br><span class="line">    image = image[<span class="literal">None</span>]</span><br><span class="line">    <span class="keyword">if</span>  use_gpu:</span><br><span class="line">        image = image.cuda()</span><br><span class="line">    <span class="keyword">return</span> Variable(image,volatile = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启服务</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/predict&quot;</span>,methods = [<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>():</span><br><span class="line">    data = &#123;<span class="string">&quot;success&quot;</span>: <span class="literal">False</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> flask.request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> flask.request.files.get(<span class="string">&quot;image&quot;</span>):</span><br><span class="line">            <span class="comment"># read the image in pil format</span></span><br><span class="line">            image = flask.request.files[<span class="string">&quot;image&quot;</span>].read()</span><br><span class="line">            image = Image.<span class="built_in">open</span>(io.BytesIO(image))</span><br><span class="line"></span><br><span class="line">            image = prepare_image(image,target_size=(<span class="number">224</span>,<span class="number">224</span>))</span><br><span class="line"></span><br><span class="line">            preds = F.softmax(model(image),dim = <span class="number">1</span>)</span><br><span class="line">            results = torch.topk(preds.cpu().data,k = <span class="number">3</span>,dim = <span class="number">1</span>)</span><br><span class="line">            results = (results[<span class="number">0</span>].cpu().numpy(),results[<span class="number">1</span>].cpu().numpy())</span><br><span class="line"></span><br><span class="line">            data[<span class="string">&#x27;predictions&#x27;</span>] = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> prob,label <span class="keyword">in</span> <span class="built_in">zip</span>(results[<span class="number">0</span>][<span class="number">0</span>],results[<span class="number">1</span>][<span class="number">0</span>]) :</span><br><span class="line">                label_name = idx2label[label]</span><br><span class="line">                r = &#123;<span class="string">&quot;label&quot;</span> : label_name,<span class="string">&quot;probability&quot;</span>: <span class="built_in">float</span>(prob)&#125;</span><br><span class="line">                data[<span class="string">&quot;predictions&quot;</span>].append(r)</span><br><span class="line"></span><br><span class="line">            data[<span class="string">&quot;success&quot;</span>] = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> flask.jsonify(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;loading pytorch model and flask starting server ...&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;please wait until server has fully start&quot;</span>)</span><br><span class="line"></span><br><span class="line">    load_model()</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">PyTorch_REST_API_URL = <span class="string">&quot;http://127.0.0.1:5000/predict&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict_result</span>(<span class="params">image_path</span>):</span><br><span class="line">    image = <span class="built_in">open</span>(image_path,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">    payload = &#123;<span class="string">&quot;image&quot;</span>:image&#125;</span><br><span class="line"></span><br><span class="line">    r = requests.post(PyTorch_REST_API_URL,files=payload).json()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> r[<span class="string">&#x27;success&#x27;</span>]:</span><br><span class="line">        <span class="keyword">for</span> (i,result) <span class="keyword">in</span> <span class="built_in">enumerate</span>(r[<span class="string">&quot;predictions&quot;</span>]):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;. &#123;&#125;:&#123;:.4f&#125;&#x27;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>,result[<span class="string">&#x27;label&#x27;</span>],result[<span class="string">&#x27;probability&#x27;</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;request failed&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;classification demo&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--file&#x27;</span>,<span class="built_in">type</span> = <span class="built_in">str</span>,<span class="built_in">help</span>=<span class="string">&#x27;test image file&#x27;</span>,default=<span class="string">&#x27;R-C.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    predict_result(args.file)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch，模型部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 编程技巧</title>
      <link href="/2022/11/29/python%20%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/11/29/python%20%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="python-编程技巧"><a href="#python-编程技巧" class="headerlink" title="python 编程技巧"></a>python 编程技巧</h1><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>创造了只有内部函数可调用的外部变量</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#example  创造了只有内部函数可调用的外部变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">logo</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">msg</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&lt;<span class="subst">&#123;logo&#125;</span>&gt;<span class="subst">&#123;msg&#125;</span>&lt;<span class="subst">&#123;logo&#125;</span>&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span>  inner</span><br><span class="line"></span><br><span class="line">fn1 = outer(<span class="string">&quot;heihei&quot;</span>)</span><br><span class="line">fn1(<span class="string">&quot;哈哈&quot;</span>)</span><br></pre></td></tr></table></figure><p>关键字： nonlocal</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#a more complex example  : atm</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">account_creat</span>(<span class="params">initial_amount</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">atm</span>(<span class="params">num2,deposit = <span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">nonlocal</span>  initial_amount</span><br><span class="line">        <span class="keyword">if</span> deposit:</span><br><span class="line">            initial_amount += num2</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;存款：+<span class="subst">&#123;num2&#125;</span> ，账户余额 ：<span class="subst">&#123;initial_amount&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            initial_amount -= num2</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;取款：-<span class="subst">&#123;num2&#125;</span> ，账户余额 ：<span class="subst">&#123;initial_amount&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span>  atm</span><br><span class="line"></span><br><span class="line">fn1 = account_creat(<span class="number">20</span>)</span><br><span class="line">fn1(<span class="number">12</span>)</span><br><span class="line">fn1(<span class="number">12</span>,<span class="number">0</span>)</span><br><span class="line">fn1(<span class="number">12</span>,<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>本质上是装饰器，在不破坏目标原有的代码和功能的前提下，为目标函数增加新功能</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#example&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我要睡觉了&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我要起床了&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep</span>():</span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sleeping&quot;</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">fn = outer(sleep)</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#改进</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我要睡觉了&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我要起床了&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep</span>():</span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sleeping&quot;</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">sleep()</span><br></pre></td></tr></table></figure><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>某个工具类只有一个实例，并提供一个访问它的全局访问点。优点：节省内存开销</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#example</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">strtools</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">str_tool = strtools()</span><br><span class="line"><span class="comment"># 将其打包成为一个python 文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#此时在另一个文件中</span></span><br><span class="line"><span class="keyword">from</span> str_tools_py <span class="keyword">import</span> str_tool</span><br><span class="line">s1 = str_tool</span><br><span class="line">s2 = str_tool</span><br><span class="line"><span class="comment">#会发现s1 和 s2 属于同一个对象</span></span><br></pre></td></tr></table></figure><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>当需要大量的创建一个类的实例的时候使用工厂模式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#example</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_person</span>(<span class="params">self,p_type</span>):</span><br><span class="line">        <span class="keyword">if</span> p_type == <span class="string">&#x27;w&#x27;</span> :</span><br><span class="line">            <span class="keyword">return</span> Worker()</span><br><span class="line">        <span class="keyword">elif</span> p_type == <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> Student()</span><br><span class="line">        <span class="keyword">elif</span> p_type == <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> Teacher()</span><br><span class="line"></span><br><span class="line">factory = Factory()</span><br><span class="line">worker = factory.get_person(<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">stu = factory.get_person(<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">teacher = factory.get_person(<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#优点 ： 易于维护，符合直觉，避免修改源代码</span></span><br></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>一个系统可以有多个进程；</p><p>一个进程可以有多个线程。</p><p>进程是一个逻辑上的单位，线程是实际工作的最小物理单位。</p><p><img src="https://cdn.jsdelivr.net/gh/xliang-L/imgbase/img/s.png" alt="s.png"></p><p><img src="https://cdn.jsdelivr.net/gh/xliang-L/imgbase/img/12.png" alt="12.png"></p><h3 id="python-的多线程编程"><a href="#python-的多线程编程" class="headerlink" title="python 的多线程编程"></a>python 的多线程编程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#example</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="keyword">while</span>  <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;msg&#125;</span>&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="keyword">while</span>  <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;msg&#125;</span>&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># (self, group=None, target=None, name=None,</span></span><br><span class="line"><span class="comment">#                  args=(), kwargs=None, *, daemon=None):</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建一个唱歌的线程</span></span><br><span class="line">    thread_sing = threading.Thread(target= sing,args = (<span class="string">&quot;我要唱歌哈哈哈&quot;</span>,))</span><br><span class="line">    <span class="comment"># 创建一个跳舞的线程</span></span><br><span class="line">    thread_dance = threading.Thread(target=dance,kwargs=&#123;<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;我在跳舞lalala&quot;</span>&#125;)</span><br><span class="line">    thread_dance.start()</span><br><span class="line">    thread_sing.start()</span><br></pre></td></tr></table></figure><h2 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h2><h3 id="服务端开发"><a href="#服务端开发" class="headerlink" title="服务端开发"></a>服务端开发</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">演示socket 服务器开发</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># 创建socket对象</span></span><br><span class="line">socket_serve = socket.socket()</span><br><span class="line"><span class="comment"># 绑定ip地址</span></span><br><span class="line">socket_serve.bind(<span class="string">&quot;localhost&quot;</span>,<span class="number">8888</span>)</span><br><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line">socket_serve.listen(<span class="number">1</span>)<span class="comment">#表示接受的链接数量</span></span><br><span class="line"><span class="comment"># 等待客户端链接</span></span><br><span class="line">conn,address = socket_serve.accept()<span class="comment"># 是阻塞的方法，如果没有链接，就会卡在这一行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;接受到了客户端的信息：<span class="subst">&#123;address&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 接受客户信息 使用conn 链接对象</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line"></span><br><span class="line">    data: <span class="built_in">str</span> = conn.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment">#recv 是缓冲区的大小</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;客户端的消息：<span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 发送恢复消息</span></span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&quot;请输入要回复的消息：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> msg == <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    conn.send(msg.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="comment"># 关闭链接</span></span><br><span class="line">conn.close()</span><br><span class="line">socket_serve.close()</span><br></pre></td></tr></table></figure><h3 id="客户端开发"><a href="#客户端开发" class="headerlink" title="客户端开发"></a>客户端开发</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">演示socket 客户端开发</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># 创建socket对象</span></span><br><span class="line">socket_client = socket.socket()</span><br><span class="line"><span class="comment"># 链接ip地址</span></span><br><span class="line">socket_client.connect(<span class="string">&quot;localhost&quot;</span>,<span class="number">8888</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 发送消息</span></span><br><span class="line">    msg = <span class="built_in">input</span>(<span class="string">&quot;请输入要给服务端发送的消息：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> msg = <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    socket_client.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="comment"># 接受返回信息</span></span><br><span class="line">    recv_data = socket_client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;返回的消息：<span class="subst">&#123;recv_data.decode(<span class="string">&#x27;utf-8&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 关闭链接</span></span><br><span class="line">socket_client.close()</span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>使用单个字符串来描述，匹配某个句法规则的字符串。常用来检索替换那些符合某个模式的文本。</p><h3 id="字符串匹配基本方法"><a href="#字符串匹配基本方法" class="headerlink" title="字符串匹配基本方法"></a>字符串匹配基本方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#字符串匹配基本方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">&#x27;python java python java python java python java &#x27;</span></span><br><span class="line">y = <span class="string">&#x27;ipython java&#x27;</span></span><br><span class="line">result = re.<span class="keyword">match</span>(<span class="string">&#x27;python&#x27;</span>,s)</span><br><span class="line">result1 = re.search(<span class="string">&#x27;python&#x27;</span>,y)</span><br><span class="line">result2 = re.findall(<span class="string">&#x27;python&#x27;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># &lt;re.Match object; span=(0, 6), match=&#x27;python&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(result1)</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result.span())</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br></pre></td></tr></table></figure><h3 id="元字符匹配"><a href="#元字符匹配" class="headerlink" title="元字符匹配"></a>元字符匹配</h3><p><img src="https://cdn.jsdelivr.net/gh/xliang-L/imgbase/img/UZ7.png" alt="UZ7.png"></p><p><img src="https://cdn.jsdelivr.net/gh/xliang-L/imgbase/img/MarkText_NMjzGffJ5S.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/xliang-L/imgbase/img/MarkText_kAGWSwh3q0.png" alt=""></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">&#x27;sdsdfsklj12546!@#$%^&amp;*();[],._+=&#x27;</span></span><br><span class="line">result = re.findall (<span class="string">r&#x27;\d&#x27;</span>,s)</span><br><span class="line">result = re.findall(<span class="string">r&#x27;\W&#x27;</span>,s)</span><br><span class="line">result = re.findall(<span class="string">r&#x27;[a-zA-Z]&#x27;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配账户 ,只能数字和字母，长度限制6-10位</span></span><br><span class="line">r = <span class="string">&#x27;[a-zA-Z0-9]&#123;6,10&#125;&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(r,s))</span><br><span class="line"><span class="comment"># 匹配QQ号，要求纯数字，长度5-11，第一位不为0</span></span><br><span class="line">r = <span class="string">&#x27;^[1-9][0-9]&#123;4,10&#125;$&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;0123456&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(r,s))</span><br><span class="line"><span class="comment"># 匹配邮箱地址，只允许qq，163，gmail</span></span><br><span class="line"><span class="comment"># &#123;内容&#125;.&#123;内容&#125;.&#123;内容&#125;.&#123;内容&#125;.@&#123;内容&#125;.&#123;内容&#125;</span></span><br><span class="line">r = <span class="string">&#x27;(^[\w-]+((\.)[\w-]+)*@(qq|163|gmail)(\.[\w-]+)+$)&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;s.a.d.c.d.c@qq.a.v.c.com&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.findall(r,s))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 闭包 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 装饰器 </tag>
            
            <tag> socket </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mySQL常见命令</title>
      <link href="/2022/11/29/mySQL%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/11/29/mySQL%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="mySQL常见命令"><a href="#mySQL常见命令" class="headerlink" title="mySQL常见命令"></a>mySQL常见命令</h1><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#打开mysql 环境：</span><br><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p </span><br><span class="line">#退出</span><br><span class="line"></span><br><span class="line">exit </span><br><span class="line"></span><br><span class="line"><span class="comment">-- sql 不区分大小写，使用;结尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看数据库</span></span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="comment">-- 使用库</span></span><br><span class="line">use world;</span><br><span class="line"><span class="comment">-- 查看当前使用的库</span></span><br><span class="line"><span class="keyword">select</span> database();</span><br><span class="line"><span class="comment">-- 创建database</span></span><br><span class="line"><span class="keyword">create</span> database test charset utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> database test;</span><br><span class="line"><span class="comment">-- 查看表</span></span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">table</span> student(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>),<span class="comment">-- 10为长度限制</span></span><br><span class="line">    age <span class="type">int</span> </span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> student ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- DML</span></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (id) <span class="keyword">values</span> (<span class="number">1</span>),(<span class="number">2</span>),(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (id,name,age) <span class="keyword">values</span> (<span class="number">4</span>,<span class="string">&#x27;周杰伦&#x27;</span>,<span class="number">31</span>),(<span class="number">5</span>,<span class="string">&#x27;林俊杰&#x27;</span>,<span class="number">33</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&gt;</span><span class="number">3</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student ; <span class="comment">-- 全部删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更改数据</span></span><br><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;张学友&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- DQL</span></span><br><span class="line"><span class="comment">-- 数据查询</span></span><br><span class="line"><span class="keyword">select</span> id ,name <span class="keyword">from</span> student ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分组聚合sum avg min max count </span></span><br><span class="line"><span class="keyword">select</span> gender,<span class="built_in">avg</span>(age) <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> gender <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 排序 asc | desc </span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 取五条</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> student  limit <span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 从第十条开始去</span></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> student  limit <span class="number">10</span>,<span class="number">5</span>;</span><br><span class="line">#</span><br></pre></td></tr></table></figure><h1 id="使用python-操作mysql"><a href="#使用python-操作mysql" class="headerlink" title="使用python 操作mysql"></a>使用python 操作mysql</h1><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> Connection</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建连接</span></span><br><span class="line">conn = Connection(</span><br><span class="line">    host=<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    port = <span class="number">3306</span>,</span><br><span class="line">    user = <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password=<span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 打印成功，连接成功</span></span><br><span class="line"><span class="built_in">print</span>(conn.get_server_info())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取游标对象</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"><span class="comment"># 选择数据库</span></span><br><span class="line">conn.select_db(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="comment"># 执行sql</span></span><br><span class="line"><span class="comment"># cursor.execute(&quot;create table test_pymsql(id int);&quot;)</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select * from student&quot;</span>)</span><br><span class="line">result = cursor.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a>数据插入</h2><p>手动确认</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor.execute(<span class="string">&quot;insert into student values(6,&#x27;小明&#x27;，100)&quot;</span>)</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><p>自动确认：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conn = Connection(</span><br><span class="line">    host=<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    port = <span class="number">3306</span>,</span><br><span class="line">    user = <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password=<span class="string">&#x27;123456&#x27;</span></span><br><span class="line">    autocommit = <span class="literal">True</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog-demo</title>
      <link href="/2022/11/28/blog-demo/"/>
      <url>/2022/11/28/blog-demo/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/m2gy2FW.png" alt="" title="cs"></p><p>dflasjklfjlkasdjfkljadslfjkla</p><p>v<img src="https://cdn.jsdelivr.net/gh/xliang-L/imgbase/img/ShareX_TiOSNZbjA8.png" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/25/hello-world/"/>
      <url>/2022/11/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> hexo new <span class="string">&quot;My New Post&quot;</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hexo-site&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;hexo generate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;clean&quot;</span>: <span class="string">&quot;hexo clean&quot;</span>,</span><br><span class="line">    <span class="string">&quot;deploy&quot;</span>: <span class="string">&quot;hexo deploy&quot;</span>,</span><br><span class="line">    <span class="string">&quot;server&quot;</span>: <span class="string">&quot;hexo server&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;5.4.2&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;hexo&quot;</span>: <span class="string">&quot;^5.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-deployer-git&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-archive&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-category&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-index&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-generator-tag&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-ejs&quot;</span>: <span class="string">&quot;^1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-marked&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-pug&quot;</span>: <span class="string">&quot;^3.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-renderer-stylus&quot;</span>: <span class="string">&quot;^2.1.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-server&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-theme-butterfly&quot;</span>: <span class="string">&quot;^4.5.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-theme-landscape&quot;</span>: <span class="string">&quot;^0.0.3&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
